<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.su.supplydistributesystem.mapper.OrderItemMapper">

    <select id="selectById" resultType="com.su.supplydistributesystem.domain.OrderItem" parameterType="java.lang.Integer">
        select * from `order_item` where id= #{id} and `valid` = 1
    </select>
    
    <select id="select" resultType="com.su.supplydistributesystem.domain.OrderItem" parameterType="java.util.Map">
        select * from `order_item` where `valid` = 1
        <if test="id!=null">
            and `id` = #{id}
        </if>
    </select>

    <select id="selectList" resultType="com.su.supplydistributesystem.domain.OrderItem" parameterType="java.util.Map">
        select * from `order_item` where `valid` = 1
        <if test="orderId!=null">
            and orderId = #{orderId}
        </if>
        <if test="startIndex != null and pageSize != null">
            limit #{startIndex},#{pageSize}
        </if>
    </select>
    
    <select id="countOrderCount" resultType="com.su.supplydistributesystem.service.statistic.OrderItemDailyCount" parameterType="java.util.Map">
        select count(DISTINCT orderId) as `count`,date(createTime) as `date`
        from `order_item`
        where `valid` = 1
        <if test="status!=null">
            and `status` = #{status}
        </if>
        <if test="available!=null">
            and `status` &gt; 0
        </if>
        <if test="categoryId1!=null">
            and categoryId1 = #{categoryId1}
        </if>
        <if test="categoryId2!=null">
            and categoryId2 = #{categoryId2}
        </if>
        <if test="categoryId3!=null">
            and categoryId3 = #{categoryId3}
        </if>
        <if test="date!=null">
            and #{date} &gt;= date(createTime) and DATE_SUB(#{date},INTERVAL 1 MONTH) &lt; date(createTime)
        </if>
        group by(date(createTime))
        order by date(createTime) desc
    </select>
    
    <select id="countSalesCount" resultType="com.su.supplydistributesystem.service.statistic.OrderItemDailyCount" parameterType="java.util.Map">
        select sum(`count`) as `count`,date(createTime) as `date`
        from `order_item`
        where `valid` = 1
        <if test="status!=null">
            and `status` = #{status}
        </if>
        <if test="available!=null">
            and `status` &gt; 0
        </if>
        <if test="categoryId1!=null">
            and categoryId1 = #{categoryId1}
        </if>
        <if test="categoryId2!=null">
            and categoryId2 = #{categoryId2}
        </if>
        <if test="categoryId3!=null">
            and categoryId3 = #{categoryId3}
        </if>
        <if test="date!=null">
            and #{date} &gt;= date(createTime) and DATE_SUB(#{date},INTERVAL 7 DAY) &lt; date(createTime)
        </if>
        group by(date(createTime))
        order by date(createTime) asc
    </select>
    
    <select id="selectCount" resultType="java.lang.Integer" parameterType="java.util.Map">
        select count(*) from `order_item` where `valid` = 1
        <if test="id!=null">

        </if>
    </select>
    
    <insert id="batchInsert" parameterType="com.su.supplydistributesystem.domain.OrderItem" useGeneratedKeys="true"
            keyProperty="id">
        insert into `order_item`
        (
        `orderId`,
        `goodsId`,
        `categoryId1`,
        `categoryId2`,
        `categoryId3`,
        `goodSupplyId`,
        `goodsName`,
        `taobaoPrice`,
        `jdPrice`,
        `price`,
        `supplyPrice`,
        `count`,
        `amount`,
        `profit1`,
        `profit2`,
        `profit3`,
        `createBy`,
        `updateBy`,
        `supplierName`
        )
        values
        <foreach item="item" index="index" collection="list" separator=",">
            (
            #{item.orderId},
            #{item.goodsId},
            #{item.categoryId1},
            #{item.categoryId2},
            #{item.categoryId3},
            #{item.goodSupplyId},
            #{item.goodsName},
            #{item.taobaoPrice},
            #{item.jdPrice},
            #{item.price},
            #{item.supplyPrice},
            #{item.count},
            #{item.amount},
            #{item.profit1},
            #{item.profit2},
            #{item.profit3},
            #{item.createBy},
            #{item.createBy},
            #{item.supplierName}
            )
        </foreach>
    </insert>
    
    <update id="batchUpdate" parameterType="com.su.supplydistributesystem.mapper.OrderItemUpdateParams">
        update `order_item` set `goodsId` =
        CASE
        <foreach item="item" index="index" collection="list" >
            WHEN id = #{item.id} THEN #{item.goodsId}
        </foreach>
        ELSE `goodsId`
        END,
        `categoryId1` =
        CASE
        <foreach item="item" index="index" collection="list" >
            WHEN id = #{item.id} THEN #{item.categoryId1}
        </foreach>
        ELSE `categoryId1`
        END,
        `categoryId2` =
        CASE
        <foreach item="item" index="index" collection="list" >
            WHEN id = #{item.id} THEN #{item.categoryId2}
        </foreach>
        ELSE `categoryId2`
        END,
        `categoryId3` =
        CASE
        <foreach item="item" index="index" collection="list" >
            WHEN id = #{item.id} THEN #{item.categoryId3}
        </foreach>
        ELSE `categoryId3`
        END,
        `goodSupplyId` =
        CASE
        <foreach item="item" index="index" collection="list" >
            WHEN id = #{item.id} THEN #{item.goodSupplyId}
        </foreach>
        ELSE `goodSupplyId`
        END,
        `goodsName` =
        CASE
        <foreach item="item" index="index" collection="list" >
            WHEN id = #{item.id} THEN #{item.goodsName}
        </foreach>
        ELSE `goodsName`
        END,
        `taobaoPrice` =
        CASE
        <foreach item="item" index="index" collection="list" >
            WHEN id = #{item.id} THEN #{item.taobaoPrice}
        </foreach>
        ELSE `taobaoPrice`
        END,
        `jdPrice` =
        CASE
        <foreach item="item" index="index" collection="list" >
            WHEN id = #{item.id} THEN #{item.jdPrice}
        </foreach>
        ELSE `jdPrice`
        END,
        `price` =
        CASE
        <foreach item="item" index="index" collection="list" >
            WHEN id = #{item.id} THEN #{item.price}
        </foreach>
        ELSE `price`
        END,
        `supplyPrice` =
        CASE
        <foreach item="item" index="index" collection="list" >
            WHEN id = #{item.id} THEN #{item.supplyPrice}
        </foreach>
        ELSE `supplyPrice`
        END,
        `count` =
        CASE
        <foreach item="item" index="index" collection="list" >
            WHEN id = #{item.id} THEN #{item.count}
        </foreach>
        ELSE `count`
        END,
        `amount` =
        CASE
        <foreach item="item" index="index" collection="list" >
            WHEN id = #{item.id} THEN #{item.amount}
        </foreach>
        ELSE `amount`
        END,
        `profit1` =
        CASE
        <foreach item="item" index="index" collection="list" >
            WHEN id = #{item.id} THEN #{item.profit1}
        </foreach>
        ELSE `profit1`
        END,
        `profit2` =
        CASE
        <foreach item="item" index="index" collection="list" >
            WHEN id = #{item.id} THEN #{item.profit2}
        </foreach>
        ELSE `profit2`
        END,
        `profit3` =
        CASE
        <foreach item="item" index="index" collection="list" >
            WHEN id = #{item.id} THEN #{item.profit3}
        </foreach>
        ELSE `profit3`
        END,
        `supplierName` =
        CASE
        <foreach item="item" index="index" collection="list" >
            WHEN id = #{item.id} THEN #{item.supplierName}
        </foreach>
        ELSE `supplierName`
        END,
        `valid` =
        CASE
        <foreach item="item" index="index" collection="list" >
            WHEN id = #{item.id} THEN 1
        </foreach>
        ELSE 0
        END,
        `updateTime` = now(),
        `updateBy` = #{updateBy}
        where `orderId` = #{orderId} and valid = 1
    </update>

    <delete id="deleteByOrderId" parameterType="java.lang.Integer">
        update `order_item` set valid = 0 where `orderId` = #{orderId}
    </delete>
</mapper>